var search_data = {"index":{"searchIndex":["copernicium","driver","fileobj","pushpull","repos","revlog","snapshot","uicomm","workspace","object","string","==()","uicommandparser()","add_file()","blu()","branch()","branches()","checkout()","checkout()","clean()","clean()","clear()","clone()","clone()","colorize()","commit()","commit()","connect()","create_branch()","create_project()","current()","delete_branch()","delete_file()","delete_snapshot()","diff_files()","diff_snapshots()","diffset()","fetch()","get()","get_file()","get_snapshot()","getroot()","grn()","has_snapshots?()","hash_array()","hash_array()","hash_file()","hasher()","history()","history()","history()","include?()","indexof()","init()","isbranch?()","last()","make_branch()","make_snapshot()","merge()","merge()","merge()","merge_snapshot()","more_folders()","new()","new()","new()","noroot?()","pexit()","pull()","pull()","push()","push()","readfile()","readfile()","red()","reset()","root_found()","run()","setup()","setup()","setup()","setup()","status()","status()","transfer()","update_branch()","update_snap()","updatelog()","writefile()","writefile()","ws_files()","yel()","readme"],"longSearchIndex":["copernicium","copernicium::driver","copernicium::fileobj","copernicium::pushpull","copernicium::repos","copernicium::revlog","copernicium::snapshot","copernicium::uicomm","copernicium::workspace","object","string","copernicium::fileobj#==()","copernicium::pushpull#uicommandparser()","copernicium::revlog::add_file()","string#blu()","copernicium::driver#branch()","copernicium::repos::branches()","copernicium::driver#checkout()","copernicium::workspace::checkout()","copernicium::driver#clean()","copernicium::workspace::clean()","copernicium::workspace::clear()","copernicium::driver#clone()","copernicium::pushpull#clone()","string#colorize()","copernicium::driver#commit()","copernicium::workspace::commit()","copernicium::pushpull#connect()","copernicium::driver#create_branch()","copernicium::workspace::create_project()","copernicium::repos#current()","copernicium::repos::delete_branch()","copernicium::revlog::delete_file()","copernicium::repos::delete_snapshot()","copernicium::revlog::diff_files()","copernicium::repos::diff_snapshots()","copernicium::repos::diffset()","copernicium::pushpull#fetch()","copernicium::driver#get()","copernicium::revlog::get_file()","copernicium::repos::get_snapshot()","copernicium::workspace#getroot()","string#grn()","copernicium::repos::has_snapshots?()","copernicium::repos::hash_array()","copernicium::revlog#hash_array()","copernicium::revlog::hash_file()","copernicium::repos::hasher()","copernicium::driver#history()","copernicium::repos::history()","copernicium::revlog::history()","copernicium::workspace::include?()","copernicium::workspace::indexof()","copernicium::driver#init()","copernicium::driver#isbranch?()","copernicium::fileobj#last()","copernicium::repos::make_branch()","copernicium::repos::make_snapshot()","copernicium::driver#merge()","copernicium::revlog::merge()","copernicium::workspace::merge()","copernicium::repos::merge_snapshot()","copernicium::workspace#more_folders()","copernicium::fileobj::new()","copernicium::snapshot::new()","copernicium::uicomm::new()","copernicium::workspace#noroot?()","copernicium::driver#pexit()","copernicium::driver#pull()","copernicium::pushpull#pull()","copernicium::driver#push()","copernicium::pushpull#push()","copernicium#readfile()","copernicium::repos#readfile()","string#red()","string#reset()","copernicium::workspace#root_found()","copernicium::driver#run()","copernicium::driver#setup()","copernicium::repos::setup()","copernicium::revlog::setup()","copernicium::workspace::setup()","copernicium::driver#status()","copernicium::workspace::status()","copernicium::pushpull#transfer()","copernicium::repos::update_branch()","copernicium::repos::update_snap()","copernicium::revlog::updatelog()","copernicium#writefile()","copernicium::repos#writefile()","copernicium::workspace::ws_files()","string#yel()",""],"info":[["Copernicium","","Copernicium.html","","<p>Revlog Top Level Function Definitions (Xiangru)\n<p>add_file: add a file to the revision history in - file …\n"],["Copernicium::Driver","","Copernicium/Driver.html","","<p>main driver for the command line user interface\n"],["Copernicium::FileObj","","Copernicium/FileObj.html","",""],["Copernicium::PushPull","","Copernicium/PushPull.html","",""],["Copernicium::Repos","","Copernicium/Repos.html","",""],["Copernicium::RevLog","","Copernicium/RevLog.html","",""],["Copernicium::Snapshot","","Copernicium/Snapshot.html","",""],["Copernicium::UIComm","","Copernicium/UIComm.html","","<p>Communication object that will pass commands to backend modules also used\nin unit test to make sure command …\n"],["Copernicium::Workspace","","Copernicium/Workspace.html","",""],["Object","","Object.html","",""],["String","","String.html","","<p>open up string class, enable terminal colors add some colors, windowing\nmethods\n"],["==","Copernicium::FileObj","Copernicium/FileObj.html#method-i-3D-3D","(rhs)",""],["UICommandParser","Copernicium::PushPull","Copernicium/PushPull.html#method-i-UICommandParser","(ui_comm)","<p>Chris&#39;s edit Takes in Ethan&#39;s UICommandCommunicator object and\ncalls a method based on the command …\n"],["add_file","Copernicium::RevLog","Copernicium/RevLog.html#method-c-add_file","(file_name, content)",""],["blu","String","String.html#method-i-blu","()",""],["branch","Copernicium::Driver","Copernicium/Driver.html#method-i-branch","(args)",""],["branches","Copernicium::Repos","Copernicium/Repos.html#method-c-branches","()","<p>Return string array of what branches we have\n"],["checkout","Copernicium::Driver","Copernicium/Driver.html#method-i-checkout","(args)",""],["checkout","Copernicium::Workspace","Copernicium/Workspace.html#method-c-checkout","(comm)",""],["clean","Copernicium::Driver","Copernicium/Driver.html#method-i-clean","(args = [])",""],["clean","Copernicium::Workspace","Copernicium/Workspace.html#method-c-clean","(comm)","<p>reset first: delete them from disk and reset @@files restore it with\ncheckout() if we have had a branch …\n"],["clear","Copernicium::Workspace","Copernicium/Workspace.html#method-c-clear","()","<p>Clear the current workspace\n"],["clone","Copernicium::Driver","Copernicium/Driver.html#method-i-clone","(args)",""],["clone","Copernicium::PushPull","Copernicium/PushPull.html#method-i-clone","(remote, user = nil)","<p>Function: clone()\n<p>Description:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Grabs</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">repository</span> <span class=\"ruby-identifier\">from</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">remote</span> <span class=\"ruby-identifier\">server</span>\n</pre>\n"],["colorize","String","String.html#method-i-colorize","(color, mod)",""],["commit","Copernicium::Driver","Copernicium/Driver.html#method-i-commit","(args)",""],["commit","Copernicium::Workspace","Copernicium/Workspace.html#method-c-commit","(comm)","<p>commit a list of files or the entire workspace to make a new snapshot\n"],["connect","Copernicium::PushPull","Copernicium/PushPull.html#method-i-connect","(remote, user, &block)","<p>Function: connect()\n<p>Description:\n\n<pre>a net/ssh wrapper, if given a block will execute block on server, otherwise ...</pre>\n"],["create_branch","Copernicium::Driver","Copernicium/Driver.html#method-i-create_branch","(branch)","<p>create and switch to a new branch\n"],["create_project","Copernicium::Workspace","Copernicium/Workspace.html#method-c-create_project","(location = Dir.pwd)","<p>create a new copernicium project\n"],["current","Copernicium::Repos","Copernicium/Repos.html#method-i-current","()","<p>BRANCHING\n"],["delete_branch","Copernicium::Repos","Copernicium/Repos.html#method-c-delete_branch","(branch)",""],["delete_file","Copernicium::RevLog","Copernicium/RevLog.html#method-c-delete_file","(file_id)","<p>return 1 if succeed, otherwise 0\n"],["delete_snapshot","Copernicium::Repos","Copernicium/Repos.html#method-c-delete_snapshot","(id)","<p>Find snapshot, delete from snaps/memory\n"],["diff_files","Copernicium::RevLog","Copernicium/RevLog.html#method-c-diff_files","(file_id1, file_id2)",""],["diff_snapshots","Copernicium::Repos","Copernicium/Repos.html#method-c-diff_snapshots","(id1, id2)","<p>diff_snapshots needs to catch both files in snap1 that aren’t and snap2 and\nfind individual differences …\n"],["diffset","Copernicium::Repos","Copernicium/Repos.html#method-c-diffset","(array1, array2)","<p>Select all elements of array1 that are not in array2\n"],["fetch","Copernicium::PushPull","Copernicium/PushPull.html#method-i-fetch","(remote, dest, local, user, &block)","<p>Function: fetch()\n<p>Description:\n\n<pre>a net/scp wrapper to copy from server, can take a block or do a one-off ...</pre>\n"],["get","Copernicium::Driver","Copernicium/Driver.html#method-i-get","(info)","<p>Get some info from the user when they dont specify it\n"],["get_file","Copernicium::RevLog","Copernicium/RevLog.html#method-c-get_file","(id)",""],["get_snapshot","Copernicium::Repos","Copernicium/Repos.html#method-c-get_snapshot","(id)","<p>Find snapshot and return snapshot from id\n"],["getroot","Copernicium::Workspace","Copernicium/Workspace.html#method-i-getroot","()","<p>find  the root .cn folder\n"],["grn","String","String.html#method-i-grn","()",""],["has_snapshots?","Copernicium::Repos","Copernicium/Repos.html#method-c-has_snapshots-3F","()","<p>check if any snapshots exist, if not exit\n"],["hash_array","Copernicium::Repos","Copernicium/Repos.html#method-c-hash_array","()",""],["hash_array","Copernicium::RevLog","Copernicium/RevLog.html#method-i-hash_array","()",""],["hash_file","Copernicium::RevLog","Copernicium/RevLog.html#method-c-hash_file","(file_name, content)",""],["hasher","Copernicium::Repos","Copernicium/Repos.html#method-c-hasher","(obj)","<p>returns the hash of an object\n"],["history","Copernicium::Driver","Copernicium/Driver.html#method-i-history","(args)",""],["history","Copernicium::Repos","Copernicium/Repos.html#method-c-history","(branch = nil)","<p>Return array of snapshot IDs\n"],["history","Copernicium::RevLog","Copernicium/RevLog.html#method-c-history","(file_name)",""],["include?","Copernicium::Workspace","Copernicium/Workspace.html#method-c-include-3F","(files)","<p>if include all the elements in list_files\n"],["indexOf","Copernicium::Workspace","Copernicium/Workspace.html#method-c-indexOf","(x)","<p>workspace management\n"],["init","Copernicium::Driver","Copernicium/Driver.html#method-i-init","(args)","<p>create a new copernicium repository\n"],["isbranch?","Copernicium::Driver","Copernicium/Driver.html#method-i-isbranch-3F","(branch)","<p>check whether a specific branch exists\n"],["last","Copernicium::FileObj","Copernicium/FileObj.html#method-i-last","()","<p>returns most recent file id in the snapshot it was saved in\n"],["make_branch","Copernicium::Repos","Copernicium/Repos.html#method-c-make_branch","(branch)","<p>Return hash ID of new branch\n"],["make_snapshot","Copernicium::Repos","Copernicium/Repos.html#method-c-make_snapshot","(files = [])","<p>Create and return snapshot\n"],["merge","Copernicium::Driver","Copernicium/Driver.html#method-i-merge","(args)",""],["merge","Copernicium::RevLog","Copernicium/RevLog.html#method-c-merge","(id1, id2)",""],["merge","Copernicium::Workspace","Copernicium/Workspace.html#method-c-merge","(id)","<p>wrapper for Repos merge_snapshot, update workspace with result\n"],["merge_snapshot","Copernicium::Repos","Copernicium/Repos.html#method-c-merge_snapshot","(id)","<p>todo - Check to make sure id is from a different branch Merge the target\nsnapshot into HEAD snapshot …\n"],["more_folders","Copernicium::Workspace","Copernicium/Workspace.html#method-i-more_folders","()",""],["new","Copernicium::FileObj","Copernicium/FileObj.html#method-c-new","(path, ids)",""],["new","Copernicium::Snapshot","Copernicium/Snapshot.html#method-c-new","(files = [])","<p>id is computed after creation\n"],["new","Copernicium::UIComm","Copernicium/UIComm.html#method-c-new","(command: nil, files: nil, rev: nil, cmt_msg: nil, repo: nil, opts: nil)",""],["noroot?","Copernicium::Workspace","Copernicium/Workspace.html#method-i-noroot-3F","()","<p>tells us whether we are in a cn project or not\n"],["pexit","Copernicium::Driver","Copernicium/Driver.html#method-i-pexit","(msg, sig)","<p>Print and exit with a specific code\n"],["pull","Copernicium::Driver","Copernicium/Driver.html#method-i-pull","(args)",""],["pull","Copernicium::PushPull","Copernicium/PushPull.html#method-i-pull","(remote, branch, user)","<p>Function: pull()\n<p>Description:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">pulls</span> <span class=\"ruby-identifier\">remote</span> <span class=\"ruby-identifier\">changes</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">current</span> <span class=\"ruby-identifier\">branch</span> <span class=\"ruby-identifier\">from</span> <span class=\"ruby-identifier\">remote</span> <span class=\"ruby-identifier\">branch</span>\n</pre>\n"],["push","Copernicium::Driver","Copernicium/Driver.html#method-i-push","(args)",""],["push","Copernicium::PushPull","Copernicium/PushPull.html#method-i-push","(remote, branch, user)","<p>Function: push()\n<p>Description:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">pushes</span> <span class=\"ruby-identifier\">local</span> <span class=\"ruby-identifier\">changes</span> <span class=\"ruby-identifier\">on</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">current</span> <span class=\"ruby-identifier\">branch</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">remote</span> <span class=\"ruby-identifier\">branch</span>\n</pre>\n"],["readFile","Copernicium","Copernicium.html#method-i-readFile","(path)","<p>helper methods for file IO\n"],["readFile","Copernicium::Repos","Copernicium/Repos.html#method-i-readFile","(path)","<p>helper methods for file IO\n"],["red","String","String.html#method-i-red","()",""],["reset","String","String.html#method-i-reset","()",""],["root_found","Copernicium::Workspace","Copernicium/Workspace.html#method-i-root_found","()",""],["run","Copernicium::Driver","Copernicium/Driver.html#method-i-run","(args)","<p>Executes the required action for a given user command.\n<p>Parameters:\n\n<pre>* args - an array containing the tokenized ...</pre>\n"],["setup","Copernicium::Driver","Copernicium/Driver.html#method-i-setup","()",""],["setup","Copernicium::Repos","Copernicium/Repos.html#method-c-setup","(root = Dir.pwd, branch = 'master')","<p>check the current branch (.cn/branch) read in file of snapshots\n(.cn/history)\n"],["setup","Copernicium::RevLog","Copernicium/RevLog.html#method-c-setup","(root = Dir.pwd)",""],["setup","Copernicium::Workspace","Copernicium/Workspace.html#method-c-setup","(bname = 'master')",""],["status","Copernicium::Driver","Copernicium/Driver.html#method-i-status","(args)","<p>show the current repos status\n"],["status","Copernicium::Workspace","Copernicium/Workspace.html#method-c-status","()",""],["transfer","Copernicium::PushPull","Copernicium/PushPull.html#method-i-transfer","(remote, user, &block)","<p>Function: transfer()\n<p>Description:\n\n<pre>a net/scp wrapper to copy to server</pre>\n"],["update_branch","Copernicium::Repos","Copernicium/Repos.html#method-c-update_branch","(branch)",""],["update_snap","Copernicium::Repos","Copernicium/Repos.html#method-c-update_snap","()","<p>helper to write a snapshot, saving a new commit\n"],["updatelog","Copernicium::RevLog","Copernicium/RevLog.html#method-c-updatelog","()",""],["writeFile","Copernicium","Copernicium.html#method-i-writeFile","(path, content)","<p>helper methods for file IO\n"],["writeFile","Copernicium::Repos","Copernicium/Repos.html#method-i-writeFile","(path, content)","<p>helper methods for file IO\n"],["ws_files","Copernicium::Workspace","Copernicium/Workspace.html#method-c-ws_files","()","<p>get all files currently in workspace, except folders and .cn/*\n"],["yel","String","String.html#method-i-yel","()",""],["README","","README_md.html","","<p>copernicium\n<p><img src=\"https://img.shields.io/npm/l/alt.svg?style=flat\">\n<img\nsrc=\"https://badge.fury.io/rb/copernicium.svg\"> ...\n"]]}}